{
    "distribution.Functions.time_distribution": {
        "code": "class Functions:\n    def time_distribution(self, dist, property):\n        \"\"\"Times evaluation of the pdf, logpdf, cdf and logcdf.\"\"\"\n        try:\n            if property == \"pdf\":\n                self.randvar.distribution.pdf(x=self.eval_point)\n            elif property == \"logpdf\":\n                self.randvar.distribution.pdf(x=self.eval_point)\n            elif property == \"cdf\":\n                self.randvar.distribution.pdf(x=self.quantile)\n            elif property == \"logcdf\":\n                self.randvar.distribution.pdf(x=self.quantile)\n        except NotImplementedError:\n            pass\n\n    def setup(self, dist, property):\n        self.randvar = get_randvar(distribution_name=dist)\n        self.eval_point = np.random.uniform(self.randvar.shape)\n        self.quantile = np.random.uniform(self.randvar.shape)",
        "min_run_count": 2,
        "name": "distribution.Functions.time_distribution",
        "number": 0,
        "param_names": [
            "dist",
            "property"
        ],
        "params": [
            [
                "'univar_normal'",
                "'multivar_normal'",
                "'matrixvar_normal'",
                "'symmatrixvar_normal'"
            ],
            [
                "'pdf'",
                "'logpdf'",
                "'cdf'",
                "'logcdf'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ddfce279c526235a5c98b81c136259a7718f7d1f79b54a171f9594de54c0ba41",
        "warmup_time": -1
    },
    "distribution.Sampling.peakmem_sample": {
        "code": "class Sampling:\n    def peakmem_sample(self, dist):\n        \"\"\"Peak memory of sampling process.\"\"\"\n        self.randvar.sample(self.n_samples)\n\n    def setup(self, dist):\n        np.random.seed(42)\n        self.n_samples = 1000\n        self.randvar = get_randvar(distribution_name=dist)",
        "name": "distribution.Sampling.peakmem_sample",
        "param_names": [
            "dist"
        ],
        "params": [
            [
                "'univar_normal'",
                "'multivar_normal'",
                "'matrixvar_normal'",
                "'symmatrixvar_normal'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "c75738772ab05552dcec0b653b26eb4397de0c750d14eea3f6e0b1afbf0a8a97"
    },
    "distribution.Sampling.time_sample": {
        "code": "class Sampling:\n    def time_sample(self, dist):\n        \"\"\"Times sampling from this distribution.\"\"\"\n        self.randvar.sample(self.n_samples)\n\n    def setup(self, dist):\n        np.random.seed(42)\n        self.n_samples = 1000\n        self.randvar = get_randvar(distribution_name=dist)",
        "min_run_count": 2,
        "name": "distribution.Sampling.time_sample",
        "number": 0,
        "param_names": [
            "dist"
        ],
        "params": [
            [
                "'univar_normal'",
                "'multivar_normal'",
                "'matrixvar_normal'",
                "'symmatrixvar_normal'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f20f857be1d0c0f4340e8064e5285dad677a08c3d33aa21133d190a573c4fad8",
        "warmup_time": -1
    },
    "version": 2
}